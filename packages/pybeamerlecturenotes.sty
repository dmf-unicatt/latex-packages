%%% ================================================================
%%%                     REQUIRED PACKAGES
%%% ================================================================

% Basic math
\RequirePackage{amsmath}
\RequirePackage{amssymb}
\RequirePackage{amsfonts}
\RequirePackage{amsthm}
\RequirePackage{thmtools}

% Load graphics packages
\RequirePackage{graphicx}

% Enable links
\RequirePackage{hyperref}
\hypersetup{
  colorlinks=true,     % Use colored text for links instead of boxes
  linkcolor=black,     % Set all colors to black
  citecolor=black,
  urlcolor=black,
  pdfborder={0 0 0},   % Remove border around links
  bookmarksdepth=0     % Disable bookmarks
}

% For \externaldocument used in \includechapter
\RequirePackage{xr-hyper}

% interpret beamer frames for book output
\RequirePackage[noamsthm]{beamerarticle}

% Load tikz
\RequirePackage{tikz}
\usetikzlibrary{calc,intersections,shapes.geometric}
\RequirePackage{pgfplots}
\usepgfplotslibrary{patchplots}
\pgfplotsset{compat=1.18}

% Load tabularx and colortbl to typeset tables
\RequirePackage{tabularx}
\RequirePackage{colortbl}

% Load comment to temporarily comment out parts of the main document
\RequirePackage{comment}

% Load package for nicer small fractions
\RequirePackage{nicefrac}

% Load the tex-notebook package from this same repository for the pycell environment
\RequirePackage{tex-notebook}

%%% ================================================================
%%%                           PACKAGE OPTIONS
%%% ================================================================

\ExplSyntaxOn

% Define keys and default values
\keys_define:nn { pybeamerlecturenotes }
  {
    append-job-name-to-notebook .bool_set:N = \l__pybeamerlecturenotes_append_jobname_bool,
    append-job-name-to-notebook .initial:n = false,
  }

% Set default values
\keys_set:nn { pybeamerlecturenotes } { append-job-name-to-notebook = false }

% Process unknown package options as key-values
\DeclareOption*{
  \edef\temp{\noexpand\keys_set:nn { pybeamerlecturenotes } { \CurrentOption }}
  \temp
}
\ProcessOptions\relax

\ExplSyntaxOff

%%% ================================================================
%%%                     NOTEBOOK CONFIGURATION
%%% ================================================================

% Create a new notebook at every chapter
\ExplSyntaxOn
\pretocmd{\chapter}{%
  \stepcounter{pynotebook}
  % Attach chapter number to notebook
  \ifPythonTeXLoaded
  % Folder name
  \bool_if:NTF \l__pybeamerlecturenotes_append_jobname_bool
    { \edef\nbfolder{notebooks-\jobname} }
    { \edef\nbfolder{notebooks} }
  % Notebook name: \thechapter has not been incremented yet, so use python f-string f"notebok_{... + 1}"
  \edef\nbname{notebook_{\thechapter + 1}}
  % Attach to pythontex
  \edef\attachnotebooknametopythontex{\pyc{pytex.notebook_filename = os.path.join("\nbfolder", f"\nbname.ipynb")}}%
  \attachnotebooknametopythontex
  \fi
}{}{}
\ExplSyntaxOff

%%% ================================================================
%%%                     THEOREM LIKE ENVIRONMENTS
%%% ================================================================

% Define theorem like environments
\declaretheorem[qed=$\Diamond$,style=plain,numberlike=figure]{theorem}
\declaretheorem[qed=$\Diamond$,style=plain,sibling=theorem]{lemma}
\declaretheorem[qed=$\Diamond$,style=plain,sibling=theorem]{proposition}
\declaretheorem[qed=$\Diamond$,style=plain,sibling=theorem]{corollary}
\declaretheorem[qed=$\Diamond$,style=definition,sibling=theorem]{definition}
\declaretheorem[qed=$\Diamond$,style=definition,sibling=theorem]{algorithm}
\declaretheorem[qed=$\Diamond$,style=example,sibling=theorem]{example}
\declaretheorem[qed=$\Diamond$,style=example,sibling=theorem]{exercise}
\declaretheorem[qed=$\Diamond$,style=remark,sibling=theorem]{remark}
\declaretheorem[qed=$\Diamond$,style=example]{homework}

\numberwithin{theorem}{chapter}
\numberwithin{lemma}{chapter}
\numberwithin{proposition}{chapter}
\numberwithin{corollary}{chapter}
\numberwithin{definition}{chapter}
\numberwithin{algorithm}{chapter}
\numberwithin{example}{chapter}
\numberwithin{exercise}{chapter}
\numberwithin{remark}{chapter}
\numberwithin{homework}{chapter}
\renewcommand{\thehomework}{\thechapter.\Alph{homework}}

% Define pyexercise separately, since it has a second mandatory argument
\declaretheorem[%
  name=Exercise,qed=$\Diamond$,style=example,sibling=theorem,%
  postheadhook={%
    \ifPythonTeXLoaded
    \edef\writemarkdowntitle{%
      \noexpand\pyc{all_cells.append(("markdown","\detokenize{##}\space Exercise \thetheorem"))}%
    }
    \writemarkdowntitle
    \fi
  }%
]{pyexerciseinternal}
\NewDocumentEnvironment{pyexercise}{o m}
{%
  \IfNoValueTF{#1}
    {\begin{pyexerciseinternal}}
    {\begin{pyexerciseinternal}[#1]}
}
{%
  \end{pyexerciseinternal}%
}

%%% ================================================================
%%%                MACROS FOR COMPATIBILITY WITH BEAMER
%%% ================================================================

% Define all environments as in the beamer theme
\newcommand{\highlight}[1]{\emph{#1}}
\newcommand{\highlightB}[1]{\emph{#1}}
\newcommand{\mathhighlight}[1]{#1}
\newcommand{\mathhighlightB}[1]{#1}
\newenvironment{remarkblock}[1]{\textbf{#1}\par}{\par}
\newenvironment{proofblock}[1]{\textbf{#1}\par}{\par}
\newenvironment{inverseframe}[1][]{}{}

% Redefine \frametitle to do nothing in book mode
\renewcommand{\frametitle}[1]{}

% Define \includechapter
\ExplSyntaxOn
% Define a boolean for the aux-only option
\bool_new:N \l__chapter_aux_only_bool

\keys_define:nn {includechapter}
  {
    aux-only .bool_set:N = \l__chapter_aux_only_bool,
    aux-only .default:n = {true}  % writing [aux-only] without value means true
  }

% Define the command
\makeatletter
\newcommand{\mdcell@externaldocument}[1]{}
\NewDocumentCommand{\includechapter}{O{} m}
  {
    % Parse the aux-only argument
    \keys_set:nn {includechapter} {aux-only=false, #1}  % omitting [aux-only] means false by default
    % Include either the .aux or the .tex file
    \bool_if:NTF \l__chapter_aux_only_bool
      {
        \IfFileExists{chapters/#2.aux}
          {
            \externaldocument{chapters/#2}
            \immediate\write\@auxout{%
              \string\mdcell@externaldocument{chapters/#2.aux}%
            }%
          }
          {
            \PackageError{pybeamerlecturenotes}
              {Missing~file~`chapters/#2.aux'}{The~aux-only~mode~requires~the~.aux~file~to~exist.}
          }
      }
      {
        \include{chapters/#2}
      }
  }
\makeatother
\ExplSyntaxOff
