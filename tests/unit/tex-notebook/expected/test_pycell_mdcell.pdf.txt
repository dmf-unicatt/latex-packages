     Chapter 1

     Case with numbers

     We start from the most simple case possible, the case of numbers.
         Note that this content is typed in markdown, and then converted to LaTeX
     via the markdown package.
1    x = 1
2    y = 2
3    z = 3; n = 4
4    l = 6
5    m = 7
         We can print a linear combination of the provided number from a pycell,
     either directly...
6    print(x + y + z + n - l - m)
     -3
          ... implicitly ...
7    x + y + z + n - l - m
     -3
          ... or in both ways (with duplicated output)
8    print(x + y + z + n - l - m + 1)
9    x + y + z + n - l - m + 2
     -2
     -1
          One can also print lists of numbers
10   x = [1, 2, 3]
11   y = [4, 5, 6]
12   print(f"{x}")
13   print(f"{y}")
     [1, 2, 3]
     [4, 5, 6]
     Chapter 2

     Case with strings and
     spaces

     One can print simple strings, possibly containing spaces
1    x = "one"
2    y = "two two"
3    z = "three THREE_Three"; n = "FoUr_four quattro_cuatro"
4    " ".join([x, y, z, n])
     'one two two three THREE_Three FoUr_four quattro_cuatro'
5    print(" ".join([x, y]))
6    print(" ".join([z, n]))
     one two two
     three THREE_Three FoUr_four quattro_cuatro
        One can also print multiline strings
7    Z = """three
8    THREE_Three"""
9    N = """FoUr_four
10   quattro_cuatro"""
11   print("\n".join([Z, N]))
     three
     THREE_Three
     FoUr_four
     quattro_cuatro
12   Z = '''three
13   THREE_Three'''
14   N = '''FoUr_four
15   quattro_cuatro'''
16   print("\n".join([Z, N]))
three
THREE_Three
FoUr_four
quattro_cuatro
    Chapter 3

    Variable resets

    In this file the python session resets at every chapter, and therefore

1   a = 1
2   b = "this is a string"
3   print(a, b)
    1 this is a string
        works, but trying to use the variable x from the previous chapter would not
    (see test_pycell_FAIL.tex).
    Chapter 4

    Figures

    You can have plotly figures in the code cells. By outputting the figure in the
    last line of the code cell it will be automatically added to the document.
1   import plotly.express as px
2   fig = px.scatter(x=[1, 2, 3], y=[4, 5, 6])
3   fig




       A figure appears also when other text outputs are present
4   x = [10, 20, 30]
5   y = [40, 50, 60]
6   print(f"x = {x}")
7   print(f"y = {y}")
8   fig = px.scatter(x=x, y=y)
9   fig
    x = [10, 20, 30]
    y = [40, 50, 60]
Chapter 5

Interacting with the outer
document

mdcell can interact with the rest of the document.
   For instance, we can define an equation and a figure before the mdcell call.

                                  1+1=2                                   (5.1)
   Next, we can refer to them inside the mdcell using `\eqref{...}`{=tex}
and `\ref{...}`{=tex} commands.
   We are inside the markdown cell: refer to (5.1) and to Figure 5.1.




               Figure 5.1: This is a sample figure with caption
    Chapter 6

    Hiding codes

    When PythonTeX is loaded, by providing the optional print argument, some
    pycell can be executed, included in the output notebook, but hidden from the
    print.
        We first show a cell without the print argument, which defines the variable
    a ...
        This is a text commenting the definition of the variable a. The text will
    appear in the notebook and in the pdf.

1   a = 1
       ... then a cell with print=true, which defines the variable b ...
       This is a text commenting the definition of the variable b. The text will
    appear in the notebook and in the pdf.
2   b = 2
       ... and finally a cell with print=false, which defines the variable c but will
    not show up in the pdf.
       The variable c is still available, as we can see by summing a + b + c:
3   a + b + c
    6
        Unfortunately the print optional argument is not supported without PythonTeX.
    Chapter 7

    Customizing printing and
    plotting

    7.1     numpy configuration
    The package internally sets numpy printing with the precision = 3, suppress
    = False, edgeitems = 3, threshold = 12. The user can still customize these
    choices by replacing them with np.set_printoptions. Furthermore, it omits
    types like np.float64 or np.int32 while printing the numerical results: this
    behavior cannot be disabled.
1   import numpy as np
2   pi = np.float64(np.pi)
3   pi
    3.142
4   print(pi)
    3.142
5   repr(pi)
    '3.142'
6   pi123 = np.array([pi, 2 * pi, 3 * pi])
7   pi123
    array([3.142, 6.283, 9.425])
8   print(pi123)
    [3.142 6.283 9.425]
9   repr(pi123)
    'array([3.142, 6.283, 9.425])'
     7.2     plotly configuration
     The package also does the following configuration for plotly images:

       • The library trims white space from within the image to save space in the
         LaTeX document: this behavior cannot be configured.
       • If width and height are not assigned, a default value of plotly_default_width
         = 700, plotly_default_height = 500 is assigned. The default value can
         be changed by modifying pytex.plotly_default_width and pytex.plotly_default_height.
       • Before saving, each dimension of the image is rescaled by a factor plotly_default_scale
         = 2. The default value can be changed by modifying pytex.plotly_default_scale.

        We prepare data for the visualization of the function f (x, y) = x2 + 2y 2 on
     the domain D = [−1, 1]2 .
10   x_plot = np.linspace(-1, 1, 100)
11   y_plot = np.linspace(-1, 1, 100)
12   X_plot, Y_plot = np.meshgrid(x_plot, y_plot)
13   Z_plot = X_plot**2 + 2 * Y_plot**2
        We next import plotly. We also add an auxiliary function to change the
     background to black, so that white space trimming has no effect.
14   import plotly.graph_objects as go
15   def set_black_background(fig):
16       """Set black background to a plotly figure."""
17       fig.update_layout(
18           paper_bgcolor="black",   # figure background
19           plot_bgcolor="black",    # plot area background
20           font=dict(color="white") # make text white
21       )
22   def check_image_size(image_paths, expected_dimensions):
23       """Ensure that the images have the expected dimensions."""
24       import PIL.Image
25       if len(expected_dimensions) == 2:
26           expected_width, expected_height = expected_dimensions
27           expected_width_tolerance = 0
28           expected_height_tolerance = 0
29       else:
30           assert len(expected_dimensions) == 4
31           (
32               expected_width, expected_width_tolerance,
33               expected_height, expected_height_tolerance
34           ) = expected_dimensions
35       for image_path in image_paths:
36           img = PIL.Image.open(image_path)
37           width, height = img.size
38           assert (
39                abs(width - expected_width)
40                <= expected_width_tolerance
41           ), (
42                f"Image {image_path} has width "
43                f"{width}, but expected width was "
44                f"{expected_width} with tolerance "
45                f"{expected_width_tolerance}"
46           )
47           assert (
48                abs(height - expected_height)
49                <= expected_height_tolerance
50           ), (
51                f"Image {image_path} has height "
52                f"{height}, but expected height was "
53                f"{expected_height} with tolerance "
54                f"{expected_height_tolerance}"
55           )

       We save a contour plot using the default width and height.
56   fig_path = os.path.join(
57       f"pythontex-files-{pytex.jobname}",
58       f"{pytex.id}_{pytex.instance}.png"
59   )
60   fig = go.Figure(data=[go.Contour(x=x_plot, y=y_plot, z=Z_plot)])
61   fig.update_layout(title="Contour plot")
62   fig
63   check_image_size(
64       [
65           fig_path,
66           os.path.join(
67               "images",
68               "contour_plot_"
69               "default_width_height_"
70               "white_background.png"
71           )
72       ],
73       (1223, 4, 740, 4) # affected by white space trimming
74   )
75   fig_path = os.path.join(
76       f"pythontex-files-{pytex.jobname}",
77       f"{pytex.id}_{pytex.instance}.png"
78   )
79   fig = go.Figure(data=[go.Contour(x=x_plot, y=y_plot, z=Z_plot)])
80   fig.update_layout(title="Contour plot")
81   set_black_background(fig)
82   fig




83   check_image_size(
84       [
85           fig_path,
 86            os.path.join(
 87                "images",
 88                "contour_plot_"
 89                "default_width_height_"
 90                "black_background.png"
 91            )
 92        ],
 93        (1400, 1000)    # default 700 * 500, multiplied by 2
 94   )
          We next save a contour plot manually assigning width and height.
 95   fig_path = os.path.join(
 96       f"pythontex-files-{pytex.jobname}",
 97       f"{pytex.id}_{pytex.instance}.png"
 98   )
 99   fig = go.Figure(data=[go.Contour(x=x_plot, y=y_plot, z=Z_plot)])
100   fig.update_layout(
101       title="Contour plot", width=512, height=512, autosize=False
102   )
103   fig
104   check_image_size(
105       [
106           fig_path,
107           os.path.join(
108               "images",
109               "contour_plot_"
110               "fixed_width_height_"
111               "white_background.png"
112           )
113       ],
114       (855, 4, 764, 4) # affected by white space trimming
115   )
116   fig_path = os.path.join(
117       f"pythontex-files-{pytex.jobname}",
118       f"{pytex.id}_{pytex.instance}.png"
119   )
120   fig = go.Figure(data=[go.Contour(x=x_plot, y=y_plot, z=Z_plot)])
121   fig.update_layout(
122       title="Contour plot", width=512, height=512, autosize=False
123   )
124   set_black_background(fig)
125   fig
126   check_image_size(
127       [
128           fig_path,
129           os.path.join(
130               "images",
131               "contour_plot_"
132               "fixed_width_height_"
133               "black_background.png"
134           )
135       ],
136       (1024, 1024) # assigned 512 * 512, multiplied by 2
137   )
         We finally change the default width, height and scale, and prepare new
      contour plots.
138   old_plotly_default_width = pytex.plotly_default_width
139   pytex.plotly_default_width = 555
140   old_plotly_default_height = pytex.plotly_default_height
141   pytex.plotly_default_height = 333
142   old_plotly_default_scale = pytex.plotly_default_scale
143   pytex.plotly_default_scale = 3
144   fig_path = os.path.join(
145       f"pythontex-files-{pytex.jobname}",
146       f"{pytex.id}_{pytex.instance}.png"
147   )
148   fig = go.Figure(data=[go.Contour(x=x_plot, y=y_plot, z=Z_plot)])
149   fig.update_layout(title="Contour plot")
150   fig




151   check_image_size(
152       [
153           fig_path,
154           os.path.join(
155               "images",
156               "contour_plot_"
157               "new_default_width_height_"
158               "white_background.png"
159           )
160       ],
161       (1396, 4, 608, 4) # affected by white space trimming
162   )
163   fig_path = os.path.join(
164       f"pythontex-files-{pytex.jobname}",
165       f"{pytex.id}_{pytex.instance}.png"
166   )
167   fig = go.Figure(data=[go.Contour(x=x_plot, y=y_plot, z=Z_plot)])
168   fig.update_layout(title="Contour plot")
169   set_black_background(fig)
170   fig
171   check_image_size(
172       [
173           fig_path,
174           os.path.join(
175               "images",
176               "contour_plot_"
177               "new_default_width_height_"
178               "black_background.png"
179           )
180       ],
181       (1665, 999) # default 555 * 333, multiplied by 3
182   )
         We assign the defaults back.
183   pytex.plotly_default_width = old_plotly_default_width
184   pytex.plotly_default_height = old_plotly_default_height
185   pytex.plotly_default_scale = old_plotly_default_scale
          Notebooks are automatically produced from this chapter, but any cell con-
      taining pytex would not be runnable in a plain notebook, because the pytex
      object is internal. Running the produced notebook is not really the point of
      this test, hence we simply disable any code cell that includes the words pytex
      or fig_path.
186   original_save_cells_as_notebook = save_cells_as_notebook
187

188   def save_cells_as_notebook(
189       all_cells: list[tuple[str, str]], pytex: any
190   ) -> None:
191   modified_all_cells = []
192   for cell in all_cells:
193       if cell[0] == "markdown":
194           modified_all_cells.append(cell)
195       else:
196           assert cell[0] == "code"
197           if "pytex" in cell[1]:
198               code = (
199                   "\nprint('This cell was disabled because "
200                   "it contains the command pytex')"
201               )
202           elif "fig_path" in cell[1]:
203               code = (
204                   "\nprint('This cell was disabled because "
205                   "it contains the variable fig_path')"
206               )
207           else:
208               code = cell[1]
209           modified_all_cells.append(("code", code))
210   return original_save_cells_as_notebook(
211       modified_all_cells, pytex
212   )
