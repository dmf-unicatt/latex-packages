     Chapter 1

     Case with numbers

     We start from the most simple case possible, the case of numbers.
         Note that this content is typed in markdown, and then converted to LaTeX
     via the markdown package.
1    x = 1
2    y = 2
3    z = 3; n = 4
4    l = 6
5    m = 7
         We can print a linear combination of the provided number from a pycell,
     either directly...
6    print(x + y + z + n - l - m)
     -3
          ... implicitly ...
7    x + y + z + n - l - m
     -3
          ... or in both ways (with duplicated output)
8    print(x + y + z + n - l - m + 1)
9    x + y + z + n - l - m + 2
     -2
     -1
          One can also print lists of numbers
10   x = [1, 2, 3]
11   y = [4, 5, 6]
12   print(f"{x}")
13   print(f"{y}")
     [1, 2, 3]
     [4, 5, 6]
     Chapter 2

     Case with strings and
     spaces

     One can print simple strings, possibly containing spaces
1    x = "one"
2    y = "two two"
3    z = "three THREE_Three"; n = "FoUr_four quattro_cuatro"
4    " ".join([x, y, z, n])
     'one two two three THREE_Three FoUr_four quattro_cuatro'
5    print(" ".join([x, y]))
6    print(" ".join([z, n]))
     one two two
     three THREE_Three FoUr_four quattro_cuatro
        One can also print multiline strings
7    Z = """three
8    THREE_Three"""
9    N = """FoUr_four
10   quattro_cuatro"""
11   print("\n".join([Z, N]))
     three
     THREE_Three
     FoUr_four
     quattro_cuatro
12   Z = '''three
13   THREE_Three'''
14   N = '''FoUr_four
15   quattro_cuatro'''
16   print("\n".join([Z, N]))
three
THREE_Three
FoUr_four
quattro_cuatro
    Chapter 3

    Variable resets

    In this file the python session resets at every chapter, and therefore

1   a = 1
2   b = "this is a string"
3   print(a, b)
    1 this is a string
        works, but trying to use the variable x from the previous chapter would not
    (see test_pycell_FAIL.tex).
    Chapter 4

    Figures

    You can have plotly figures in the code cells. By outputting the figure in the
    last line of the code cell it will be automatically added to the document.
1   import plotly.express as px
2   fig = px.scatter(x=[1, 2, 3], y=[4, 5, 6])
3   fig




       A figure appears also when other text outputs are present
4   x = [10, 20, 30]
5   y = [40, 50, 60]
6   print(f"x = {x}")
7   print(f"y = {y}")
8   fig = px.scatter(x=x, y=y)
9   fig
    x = [10, 20, 30]
    y = [40, 50, 60]
Chapter 5

Interacting with the outer
document

mdcell can interact with the rest of the document.
   For instance, we can define an equation and a figure before the mdcell call.

                                  1+1=2                                   (5.1)
   Next, we can refer to them inside the mdcell using `\eqref{...}`{=tex}
and `\ref{...}`{=tex} commands.
   We are inside the markdown cell: refer to (5.1) and to Figure 5.1.




               Figure 5.1: This is a sample figure with caption
    Chapter 6

    Hiding codes

    When PythonTeX is loaded, by providing the optional print argument, some
    pycell can be executed, included in the output notebook, but hidden from the
    print.
        We first show a cell without the print argument, which defines the variable
    a ...
        This is a text commenting the definition of the variable a. The text will
    appear in the notebook and in the pdf.

1   a = 1
       ... then a cell with print=true, which defines the variable b ...
       This is a text commenting the definition of the variable b. The text will
    appear in the notebook and in the pdf.
2   b = 2
       ... and finally a cell with print=false, which defines the variable c but will
    not show up in the pdf.
       The variable c is still available, as we can see by summing a + b + c:
3   a + b + c
    6
        Unfortunately the print optional argument is not supported without PythonTeX.
    Chapter 7

    Customizing printing and
    plotting

    7.1     numpy configuration
    The package internally sets numpy printing with the precision = 3, suppress
    = False, edgeitems = 3, threshold = 12. The user can still customize these
    choices by replacing them with np.set_printoptions. Furthermore, it omits
    types like np.float64 or np.int32 while printing the numerical results: this
    behavior cannot be disabled.
1   import numpy as np
2   pi = np.float64(np.pi)
3   pi
    3.142
4   print(pi)
    3.142
5   repr(pi)
    '3.142'
6   pi123 = np.array([pi, 2 * pi, 3 * pi])
7   pi123
    array([3.142, 6.283, 9.425])
8   print(pi123)
    [3.142 6.283 9.425]
9   repr(pi123)
    'array([3.142, 6.283, 9.425])'
     7.2     plotly configuration
     The package also does the following configuration for plotly images:

       • The library trims white space from within the image to save space in the
         LaTeX document: this behavior cannot be configured.
       • If width and height are not assigned, a default value of plotly_default_width
         = 700, plotly_default_height = 500 is assigned. The default value can
         be changed by modifying pytex.plotly_default_width and pytex.plotly_default_height.
       • Before saving, each dimension of the image is rescaled by a factor plotly_default_scale
         = 2. The default value can be changed by modifying pytex.plotly_default_scale.

        We prepare data for the visualization of the function f (x, y) = x2 + 2y 2 on
     the domain D = [−1, 1]2 .

10   x_plot = np.linspace(-1, 1, 100)
11   y_plot = np.linspace(-1, 1, 100)
12   X_plot, Y_plot = np.meshgrid(x_plot, y_plot)
13   Z_plot = X_plot**2 + 2 * Y_plot**2
        We next import plotly. We also add an auxiliary function to change the
     background to black, so that white space trimming has no effect.
14   import plotly.graph_objects as go
15   def set_black_background(fig):
16       """Set black background to a plotly figure."""
17       fig.update_layout(
18           paper_bgcolor="black",   # figure background
19           plot_bgcolor="black",    # plot area background
20           font=dict(color="white") # optional: make text white
21       )

22   def check_image_size(image_paths, expected_dimensions):
23       """Ensure that the images have the expected dimensions."""
24       import PIL.Image
25       expected_width, expected_height = expected_dimensions
26       for image_path in image_paths:
27           img = PIL.Image.open(image_path)
28           width, height = img.size
29           assert width == expected_width, (
30               f"Image {image_path} has width "
31               f"{width} != {expected_width}"
32           )
33           assert height == expected_height, (
34               f"Image {image_path} has height "
35               f"{height} != {expected_height}"
36           )
       We save a contour plot using the default width and height.
37   fig_path = os.path.join(
38       f"pythontex-files-{pytex.jobname}",
39       f"{pytex.id}_{pytex.instance}.png"
40   )
41   fig = go.Figure(data=[go.Contour(x=x_plot, y=y_plot, z=Z_plot)])
42   fig.update_layout(title="Contour plot")
43   fig




44   check_image_size(
45       [
46           fig_path,
47           os.path.join(
48               "images",
49               "contour_plot_"
50               "default_width_height_"
51               "white_background.png"
52           )
53       ],
54       (1223, 740) # affected by white space trimming
55   )
56   fig_path = os.path.join(
57       f"pythontex-files-{pytex.jobname}",
58       f"{pytex.id}_{pytex.instance}.png"
59   )
60   fig = go.Figure(data=[go.Contour(x=x_plot, y=y_plot, z=Z_plot)])
61   fig.update_layout(title="Contour plot")
62   set_black_background(fig)
63   fig




64   check_image_size(
65       [
66           fig_path,
67           os.path.join(
68               "images",
69               "contour_plot_"
70               "default_width_height_"
71               "black_background.png"
72           )
73       ],
74       (1400, 1000) # default 700 * 500, multiplied by 2
75   )
       We next save a contour plot manually assigning width and height.
76   fig_path = os.path.join(
77       f"pythontex-files-{pytex.jobname}",
78       f"{pytex.id}_{pytex.instance}.png"
79   )
80   fig = go.Figure(data=[go.Contour(x=x_plot, y=y_plot, z=Z_plot)])
81   fig.update_layout(
82       title="Contour plot", width=512, height=512, autosize=False
83   )
 84   fig




 85   check_image_size(
 86       [
 87           fig_path,
 88           os.path.join(
 89               "images",
 90               "contour_plot_"
 91               "fixed_width_height_"
 92               "white_background.png"
 93           )
 94       ],
 95       (855, 764) # affected by white space trimming
 96   )

 97   fig_path = os.path.join(
 98       f"pythontex-files-{pytex.jobname}",
 99       f"{pytex.id}_{pytex.instance}.png"
100   )
101   fig = go.Figure(data=[go.Contour(x=x_plot, y=y_plot, z=Z_plot)])
102   fig.update_layout(
103       title="Contour plot", width=512, height=512, autosize=False
104   )
105   set_black_background(fig)
106   fig




107   check_image_size(
108       [
109           fig_path,
110           os.path.join(
111               "images",
112               "contour_plot_"
113               "fixed_width_height_"
114               "black_background.png"
115           )
116       ],
117       (1024, 1024) # assigned 512 * 512, multiplied by 2
118   )
         We finally change the default width, height and scale, and prepare new
      contour plots.
119   old_plotly_default_width = pytex.plotly_default_width
120   pytex.plotly_default_width = 555
121   old_plotly_default_height = pytex.plotly_default_height
122   pytex.plotly_default_height = 333
123   old_plotly_default_scale = pytex.plotly_default_scale
124   pytex.plotly_default_scale = 3
125   fig_path = os.path.join(
126       f"pythontex-files-{pytex.jobname}",
127       f"{pytex.id}_{pytex.instance}.png"
128   )
129   fig = go.Figure(data=[go.Contour(x=x_plot, y=y_plot, z=Z_plot)])
130   fig.update_layout(title="Contour plot")
131   fig




132   check_image_size(
133       [
134           fig_path,
135           os.path.join(
136               "images",
137               "contour_plot_"
138               "new_default_width_height_"
139               "white_background.png"
140           )
141       ],
142       (1396, 608) # affected by white space trimming
143   )
144   fig_path = os.path.join(
145       f"pythontex-files-{pytex.jobname}",
146       f"{pytex.id}_{pytex.instance}.png"
147   )
148   fig = go.Figure(data=[go.Contour(x=x_plot, y=y_plot, z=Z_plot)])
149   fig.update_layout(title="Contour plot")
150   set_black_background(fig)
151   fig




152   check_image_size(
153       [
154           fig_path,
155           os.path.join(
156               "images",
157               "contour_plot_"
158               "new_default_width_height_"
159               "black_background.png"
160           )
161       ],
162       (1665, 999) # default 555 * 333, multiplied by 3
163   )
        We assign the defaults back.
164   pytex.plotly_default_width = old_plotly_default_width
165   pytex.plotly_default_height = old_plotly_default_height
166   pytex.plotly_default_scale = old_plotly_default_scale
